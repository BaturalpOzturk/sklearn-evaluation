{"timestamp": 1601162305.915084, "stored_source_code": "# Tracking Machine Learning experiments\n\n`SQLiteTracker` provides a simple yet powerful way to track ML experiments using a SQLite database.\n\n```python\nfrom sklearn_evaluation import SQLiteTracker\n\nfrom sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n```\n\n```python tags=[\"parameters\"]\ntracker = SQLiteTracker('my_experiments.db')\n```\n\n```python\niris = load_iris(as_frame=True)\nX, y = iris['data'], iris['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\nmodels = [RandomForestRegressor(), LinearRegression(), Lasso()]\n```\n\n```python\nfor m in models:\n    model = type(m).__name__\n    print(f'Fitting {model}')\n\n    # .new() returns a uuid and creates an entry in the db\n    uuid = tracker.new()\n    m.fit(X_train, y_train)\n    y_pred = m.predict(X_test)\n    mse = mean_squared_error(y_test, y_pred)\n\n    # add data with the .update(uuid, {'param': 'value'}) method\n    tracker.update(uuid, {'mse': mse, 'model': model, **m.get_params()})\n```\n\nOr use `.insert(uuid, params)` to supply your own ID:\n\n```python\nsvr = SVR()\nsvr.fit(X_train, y_train)\ny_pred = svr.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\n\ntracker.insert('my_uuid', {'mse': mse, 'model': type(svr).__name__, **svr.get_params()})\n```\n\n`tracker` shows last experiments by default:\n\n```python\ntracker\n```\n\n## Querying experiments\n\n```python\nordered = tracker.query(\"\"\"\nSELECT uuid,\n       json_extract(parameters, '$.model') AS model,\n       json_extract(parameters, '$.mse') AS mse\nFROM experiments\nORDER BY json_extract(parameters, '$.mse') ASC\n\"\"\")\nordered\n```\n\nThe query method returns a data frame with \"uuid\" as the index:\n\n```python\ntype(ordered)\n```\n\n## Adding comments\n\n\n```python\ntracker.comment(ordered.index[0], 'Best performing experiment')\n```\n\n```python\ntracker[ordered.index[0]]\n```\n\n## Getting recent experiments\n\nThe recent method also returns a data frame:\n\n```python\ndf = tracker.recent()\ndf\n```\n\nPass `normalize=True` to convert the nested JSON dictionary into columns:\n\n```python\ndf = tracker.recent(normalize=True)\ndf\n```\n\n```python\n# delete our example database\nfrom pathlib import Path\nPath('my_experiments.db').unlink()\n```\n"}